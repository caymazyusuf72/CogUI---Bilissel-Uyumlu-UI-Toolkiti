{
  "CogUI Button Component": {
    "prefix": ["cogui-button", "cog-btn"],
    "body": [
      "import { Button } from '@cogui/core';",
      "",
      "const ${1:MyButton} = () => {",
      "  return (",
      "    <Button",
      "      variant=\"${2:primary}\"",
      "      size=\"${3:medium}\"",
      "      disabled={${4:false}}",
      "      onClick={${5:handleClick}}",
      "      aria-label=\"${6:Button description}\"",
      "    >",
      "      ${7:Button Text}",
      "    </Button>",
      "  );",
      "};",
      "",
      "export default ${1:MyButton};"
    ],
    "description": "Create a CogUI Button component with accessibility features"
  },
  
  "CogUI Input Component": {
    "prefix": ["cogui-input", "cog-input"],
    "body": [
      "import { Input } from '@cogui/core';",
      "",
      "const ${1:MyInput} = () => {",
      "  const [value, setValue] = useState('${2:}');",
      "",
      "  return (",
      "    <Input",
      "      type=\"${3:text}\"",
      "      value={value}",
      "      onChange={(e) => setValue(e.target.value)}",
      "      placeholder=\"${4:Enter text}\"",
      "      label=\"${5:Input Label}\"",
      "      helperText=\"${6:Helper text}\"",
      "      error={${7:false}}",
      "      required={${8:false}}",
      "      aria-describedby=\"${9:input-helper}\"",
      "    />",
      "  );",
      "};",
      "",
      "export default ${1:MyInput};"
    ],
    "description": "Create a CogUI Input component with validation and accessibility"
  },

  "CogUI Modal Component": {
    "prefix": ["cogui-modal", "cog-modal"],
    "body": [
      "import { Modal } from '@cogui/core';",
      "",
      "const ${1:MyModal} = ({ isOpen, onClose }) => {",
      "  return (",
      "    <Modal",
      "      isOpen={isOpen}",
      "      onClose={onClose}",
      "      title=\"${2:Modal Title}\"",
      "      size=\"${3:medium}\"",
      "      closeOnOverlayClick={${4:true}}",
      "      closeOnEscape={${5:true}}",
      "      aria-labelledby=\"modal-title\"",
      "      aria-describedby=\"modal-description\"",
      "    >",
      "      <div>",
      "        <h2 id=\"modal-title\">${2:Modal Title}</h2>",
      "        <p id=\"modal-description\">${6:Modal content goes here}</p>",
      "        ",
      "        <div className=\"modal-actions\">",
      "          <Button variant=\"secondary\" onClick={onClose}>",
      "            Cancel",
      "          </Button>",
      "          <Button variant=\"primary\" onClick={${7:handleConfirm}}>",
      "            Confirm",
      "          </Button>",
      "        </div>",
      "      </div>",
      "    </Modal>",
      "  );",
      "};",
      "",
      "export default ${1:MyModal};"
    ],
    "description": "Create a CogUI Modal component with proper ARIA attributes"
  },

  "CogUI Card Component": {
    "prefix": ["cogui-card", "cog-card"],
    "body": [
      "import { Card } from '@cogui/core';",
      "",
      "const ${1:MyCard} = () => {",
      "  return (",
      "    <Card",
      "      variant=\"${2:elevated}\"",
      "      padding=\"${3:medium}\"",
      "      borderRadius=\"${4:medium}\"",
      "      role=\"${5:article}\"",
      "      aria-labelledby=\"card-title\"",
      "    >",
      "      <Card.Header>",
      "        <h3 id=\"card-title\">${6:Card Title}</h3>",
      "      </Card.Header>",
      "      ",
      "      <Card.Content>",
      "        <p>${7:Card content goes here}</p>",
      "      </Card.Content>",
      "      ",
      "      <Card.Footer>",
      "        <Button variant=\"primary\" size=\"small\">",
      "          ${8:Action}",
      "        </Button>",
      "      </Card.Footer>",
      "    </Card>",
      "  );",
      "};",
      "",
      "export default ${1:MyCard};"
    ],
    "description": "Create a CogUI Card component with structured content"
  },

  "CogUI Provider Setup": {
    "prefix": ["cogui-provider", "cog-provider"],
    "body": [
      "import { CogUIProvider, defaultTheme } from '@cogui/core';",
      "import { useAccessibility } from '@cogui/core/hooks';",
      "",
      "const App = () => {",
      "  const accessibilitySettings = useAccessibility();",
      "",
      "  return (",
      "    <CogUIProvider",
      "      theme={${1:defaultTheme}}",
      "      accessibility={{",
      "        highContrast: ${2:false},",
      "        reducedMotion: ${3:false},",
      "        largeText: ${4:false},",
      "        screenReaderOptimized: ${5:false}",
      "      }}",
      "      cognitiveAdaptation={{",
      "        enabled: ${6:true},",
      "        autoAdjust: ${7:true},",
      "        trackingEnabled: ${8:false}",
      "      }}",
      "    >",
      "      ${9:/* Your app content */}",
      "    </CogUIProvider>",
      "  );",
      "};",
      "",
      "export default App;"
    ],
    "description": "Setup CogUI Provider with theme and accessibility configuration"
  },

  "CogUI DataGrid Component": {
    "prefix": ["cogui-datagrid", "cog-grid"],
    "body": [
      "import { DataGrid } from '@cogui/advanced-components';",
      "",
      "const ${1:MyDataGrid} = () => {",
      "  const columns = [",
      "    { id: '${2:id}', header: '${3:ID}', width: ${4:80} },",
      "    { id: '${5:name}', header: '${6:Name}', sortable: true },",
      "    { id: '${7:email}', header: '${8:Email}', filterable: true },",
      "    { id: '${9:status}', header: '${10:Status}', width: ${11:120} }",
      "  ];",
      "",
      "  const data = ${12:[]};",
      "",
      "  return (",
      "    <DataGrid",
      "      data={data}",
      "      columns={columns}",
      "      sortable={${13:true}}",
      "      filterable={${14:true}}",
      "      selectable={${15:true}}",
      "      pagination={${16:true}}",
      "      pageSize={${17:10}}",
      "      onSelectionChange={${18:handleSelectionChange}}",
      "      onSort={${19:handleSort}}",
      "      onFilter={${20:handleFilter}}",
      "      aria-label=\"${21:Data grid}\"",
      "    />",
      "  );",
      "};",
      "",
      "export default ${1:MyDataGrid};"
    ],
    "description": "Create a CogUI DataGrid with sorting, filtering, and pagination"
  },

  "CogUI Chart Component": {
    "prefix": ["cogui-chart", "cog-chart"],
    "body": [
      "import { LineChart } from '@cogui/advanced-components';",
      "",
      "const ${1:MyChart} = () => {",
      "  const data = [",
      "    { x: ${2:'Jan'}, y: ${3:100} },",
      "    { x: ${4:'Feb'}, y: ${5:150} },",
      "    { x: ${6:'Mar'}, y: ${7:120} },",
      "    // Add more data points",
      "  ];",
      "",
      "  return (",
      "    <LineChart",
      "      data={data}",
      "      width={${8:800}}",
      "      height={${9:400}}",
      "      margin={{ top: ${10:20}, right: ${11:30}, bottom: ${12:40}, left: ${13:50} }}",
      "      xKey=\"${14:x}\"",
      "      yKey=\"${15:y}\"",
      "      showGrid={${16:true}}",
      "      showTooltip={${17:true}}",
      "      interactive={${18:true}}",
      "      accessible={${19:true}}",
      "      title=\"${20:Chart Title}\"",
      "      aria-label=\"${21:Line chart showing data over time}\"",
      "    />",
      "  );",
      "};",
      "",
      "export default ${1:MyChart};"
    ],
    "description": "Create a CogUI Chart component with accessibility features"
  },

  "CogUI Theme Hook": {
    "prefix": ["cogui-theme-hook", "cog-theme"],
    "body": [
      "import { useTheme } from '@cogui/core/hooks';",
      "",
      "const ${1:MyComponent} = () => {",
      "  const { theme, setTheme, isDark, toggleTheme } = useTheme();",
      "",
      "  const handleThemeChange = (newTheme) => {",
      "    setTheme(newTheme);",
      "  };",
      "",
      "  return (",
      "    <div style={{ backgroundColor: theme.colors.background }}>",
      "      <Button onClick={toggleTheme}>",
      "        Switch to {isDark ? 'Light' : 'Dark'} Theme",
      "      </Button>",
      "      ${2:/* Your component content */}",
      "    </div>",
      "  );",
      "};"
    ],
    "description": "Use CogUI theme hook for dynamic theming"
  },

  "CogUI Accessibility Hook": {
    "prefix": ["cogui-a11y-hook", "cog-a11y"],
    "body": [
      "import { useAccessibility } from '@cogui/core/hooks';",
      "",
      "const ${1:MyComponent} = () => {",
      "  const {",
      "    highContrast,",
      "    reducedMotion,",
      "    largeText,",
      "    screenReaderOptimized,",
      "    updateAccessibility",
      "  } = useAccessibility();",
      "",
      "  const componentStyles = {",
      "    fontSize: largeText ? '1.25rem' : '1rem',",
      "    filter: highContrast ? 'contrast(1.5)' : 'none',",
      "    transition: reducedMotion ? 'none' : 'all 0.3s ease',",
      "  };",
      "",
      "  return (",
      "    <div style={componentStyles}>",
      "      ${2:/* Your accessible component content */}",
      "    </div>",
      "  );",
      "};"
    ],
    "description": "Use CogUI accessibility hook for adaptive UI"
  },

  "CogUI Adaptive UI Hook": {
    "prefix": ["cogui-adaptive-hook", "cog-adaptive"],
    "body": [
      "import { useAdaptiveUI } from '@cogui/core/hooks';",
      "",
      "const ${1:MyComponent} = () => {",
      "  const {",
      "    cognitiveLoad,",
      "    attentionLevel,",
      "    adaptations,",
      "    isTracking",
      "  } = useAdaptiveUI();",
      "",
      "  // Adapt UI based on cognitive load",
      "  const getAdaptiveStyles = () => {",
      "    if (cognitiveLoad > 0.7) {",
      "      return {",
      "        fontSize: '1.1rem',",
      "        lineHeight: 1.6,",
      "        padding: '1rem'",
      "      };",
      "    }",
      "    return {};",
      "  };",
      "",
      "  return (",
      "    <div style={getAdaptiveStyles()}>",
      "      ${2:/* Your adaptive component content */}",
      "      {cognitiveLoad > 0.8 && (",
      "        <div className=\"cognitive-support\">",
      "          Taking a break might help!",
      "        </div>",
      "      )}",
      "    </div>",
      "  );",
      "};"
    ],
    "description": "Use CogUI adaptive UI hook for cognitive load management"
  }
}